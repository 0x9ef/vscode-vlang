{
	"name": "v",
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"fileTypes": [
		".v"
	],
	"scopeName": "source.v",
	"patterns": [
		{
			"begin": "(module)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.module.v"
				}
			},
			"end": "([\\w]*)",
			"endCaptures": {
				"1": {
					"name": "entity.name.module.v"
				}
			}
		},
		{
			"begin": "(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.v"
				}
			},
			"end": "([\\w]*)",
			"endCaptures": {
				"1": {
					"name": "entity.name.import.v"
				}
			}
		},
		{
			"begin": "(#include)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.include.v"
				}
			},
			"end": "(\\<)\\s*([\\w]*)(\\>)",
			"endCaptures": {
				"1": {
					"name": "string.quoted.double.v"
				},
				"2": {
					"name": "string.quoted.double.v"
				},
				"3": {
					"name": "string.quoted.double.v"
				}
			}
		},
		{
			"match": "(#flag)\\s+([-\/:\\w\\s]*)?",
			"captures": {
				"1": {
					"name": "keyword.flag.v"
				},
				"2": {
					"name": "string.quoted.double.v"
				}
			}
		},

		{
			"include": "#function-new"
		},
		{
			"include": "#function-exists"
		},

		{
			"comment": "Currently Unavaliable",
			"include": "#discard-go"
		},
		
		{
			"include": "#type"
		},
		{
			"include": "#enum"
		},
		{
			"include": "#struct"
		},
		{
			"include": "#interface"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},

		{
			"include": "#variable-assignment"
		},
		{
			"comment": "Currently Unavaliable",
			"include": "#discard-variable-increment"
		},
		{
			"comment": "Currently Unavaliable",
			"include": "#discard-variable-decrement"
		},

		{
			"include": "#keyword"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#std-type"
		},
		{
			"include": "#std-cbased-type"
		},
		{
			"include": "#number"
		},
		{
			"include": "#singlestring"
		},
		{
			"include": "#doublestring"
		}
	],
	"repository": {
		"line-continuation-character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.v"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.v"
						}
					},
					"name": "comment.block.v"
				},
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.v"
						}
					},
					"end": "$",
					"name": "comment.line.double-slash.v"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.v",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"variable-assignment": {
			"patterns": [
				{
					"match": "([\\w]+)\\s*(:=|=)\\s*([\\S]*)",
					"captures": {
						"1": {
							"name": "variable.other.assignment.v"
						},
						"2": {
							"name": "keyword.operator.assignment.v"
						},
						"3": {
							"patterns": [
								{
									"include": "#parent"
								},
								{
									"include": "#square-bracket"
								},
								{
									"include": "#curly-bracket"
								},
								{
									"include": "#std-type"
								},
								{
									"include": "#function-exists"
								},
								{
									"include": "#singlestring"
								},
								{
									"include": "#doublestring"
								},
								{
									"include": "#number"
								}
							]
						}
					}
				}
			]
		},
		"variable-increment": {
			"patterns": [
				{
					"match": "([\\w]*)(\\+\\+)",
					"captures": {
						"1": {
							"name": "variable.other.increment.v"
						},
						"2": {
							"name": "keyword.operator.increment.v"
						}
					}
				}
			]
		},
		"variable-decrement": {
			"patterns": [
				{
					"match": "([\\w]*)(\\-\\-)",
					"captures": {
						"1": {
							"name": "variable.other.decrement.v"
						},
						"2": {
							"name": "keyword.operator.decrement.v"
						}
					}
				}
			]
		},
		"parent": {
			"patterns": [
				{
					"name": "punctuation.definition.parent.begin.v",
					"match": "\\("
				},
				{
					"name": "punctuation.definition.parent.end.v",
					"match": "\\)"
				}
			]
		},
		"square-bracket": {
			"patterns": [
				{
					"name": "punctuation.definition.squarebracket.begin.v",
					"match": "\\["
				},
				{
					"name": "punctuation.definition.squarebracket.end.v",
					"match": "\\]"
				}
			]
		},
		"curly-bracket": {
			"patterns": [
				{
					"name": "punctuation.definition.curlybracket.begin.v",
					"match": "\\{"
				},
				{
					"name": "punctuation.definition.curlybracket.end.v",
					"match": "\\}"
				}
			]
		},
		"function-new": {
			"patterns": [
				{
					"begin": "\\b(fn)\\s+([\\w]*)",
					"beginCaptures": {
						"1": {
							"name": "keyword.function.v"
						},
						"2": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.v"
								},
								{
									"match": "\\w*",
									"name": "entity.name.function.v"
								}
							]
						}
					},
					"end": "(\\()([\\s\\w,]*)(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.parent.begin.v"
						},
						"2": {
							"patterns": [
								{
									"include": "#function-argument-parsing-only-name"
								},
								{
									"include": "#function-argument-parsing-type-and-name"
								}
							]
						},
						"3": {
							"name": "punctuation.definition.parent.end.v"
						}
					}
				}
			]
		},
		"function-exists": {
			"patterns": [
				{
					"match": "\\b([\\w]+)(\\()([\\W\\S]*)(\\))",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.v"
								},
								{
									"match": "\\w*",
									"name": "entity.name.function.v"
								}
							]
						},
						"2": {
							"name": "punctuation.definition.parent.begin.v"
						},
						"3": {
							"patterns": [
								{
									"include": "#function-argument-parsing-only-name"
								},
								{
									"include": "#function-argument-parsing-type-and-name"
								}
							]
						},
						"4": {
							"name": "punctuation.definition.parent.end.v"
						}
					}
				}
			]
		},
		"function-argument-parsing-only-name": {
			"patterns": [
				{
					"match": "([\\W\\S]*)\\s*([,]*)",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								},
								{
									"include": "#singlestring"
								},
								{
									"include": "#doublestring"
								},
								{
									"include": "#number"
								}
							]
						},
						"2": {
							"name": "punctuation.definition.comma.v"
						}
					}
				}
			]
		},
		"function-argument-parsing-type-and-name": {
			"patterns": [
				{
					"match": "\\b([\\w]*)\\s+([\\w]+)([,]*)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.v"
								},
								{
									"match": "\\w*",
									"name": "entity.name.function.argument.v"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#std-type"
								},
								{
									"include": "#std-cbased-type"
								},
								{
									"include": "#singlestring"
								},
								{
									"include": "#doublestring"
								},
								{
									"include": "#number"
								}
							]
						},
						"3": {
							"name": "punctuation.definition.comma.v"
						}
					}
				}
			]
		},
		"type": {
			"patterns": [
				{
					"comment": "Type definition",
					"match": "\\b(type)\\s+([\\w]*)\\s*([\\w]*)",
					"captures": {
						"1": {
							"name": "keyword.type.v"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\d\\w*"
								},
								{
									"name": "entity.name.type.v",
									"match": "\\w*"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\d\\w*"
								},
								{
									"name": "entity.name.type.v",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"enum": {
			"patterns": [
				{
					"comment": "Enumeration",
					"match": "\\b(enum)\\s+([\\w]*)",
					"captures": {
						"1": {
							"name": "keyword.enum.v"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\d\\w*"
								},
								{
									"name": "entity.name.enum.v",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"struct": {
			"patterns": [
				{
					"comment": "Structure",
					"match": "\\b(struct)\\s+([\\w]*)",
					"captures": {
						"1": {
							"name": "keyword.struct.v"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\d\\w*"
								},
								{
									"name": "entity.name.struct.v",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"interface": {
			"patterns": [
				{
					"comment": "Interface",
					"match": "\\b(interface)\\s+([\\w]*)",
					"captures": {
						"1": {
							"name": "keyword.interface.v"
						},
						"2": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\d\\w*"
								},
								{
									"name": "entity.name.interface.v",
									"match": "\\w*"
								}
							]
						}
					}
				}
			]
		},
		"std-type": {
			"patterns": [
				{
					"name": "storage.type.boolean.v",
					"match": "\\bbool\\b"
				},
				{
					"name": "storage.type.byte.v",
					"match": "\\bbyte\\b"
				},
				{
					"name": "storage.type.string.v",
					"match": "\\bstring\\b"
				},
				{
					"name": "storage.type.rune.v",
					"match": "\\brune\\b"
				},
				{
					"name": "storage.type.numeric.v",
					"match": "\\b(int|uint|i8|i16|i32|i64|u8|u16|u32|u64|f32|f64)\\b"
				}
			]
		},
		"std-cbased-type": {
			"patterns": [
				{
					"name": "storage.type.numeric.cbased.v",
					"match": "\\b(size_t|ptrdiff_t)\\b"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"comment": "Keyword Builtin",
					"name": "keyword.builtin.v",
					"match": "\\b(in|or)\\b"
				},
				{
					"comment": "Keyword Control",
					"name": "keyword.control.v",
					"match": "\\b(break|continue|switch|case|default|match|if|else|for|go|goto|defer|return)\\b"
				},
				{
					"comment": "Keyword Control Specific",
					"name": "keyword.control.v",
					"match": "(\\$if)"
				},
				{
					"comment": "Keyword Type",
					"name": "keyword.type.v",
					"match": "\\btype\\b"
				},
				{
					"comment": "Keyword Based Enumeration",
					"name": "keyword.enum.v",
					"match": "\\benum\\b"
				},
				{
					"comment": "Keyword Based Structure",
					"name": "keyword.struct.v",
					"match": "\\bstruct\\b"
				},
				{
					"comment": "Keyword Based Interface",
					"name": "keyword.interface.v",
					"match": "\\binterface\\b"
				},
				{
					"comment": "Keyword Extended Map",
					"name": "keyword.map.v",
					"match": "\\bmap\\b"
				},
				{
					"comment": "Keyword Extended Assert",
					"name": "keyword.assert.v",
					"match": "\\bassert\\b"
				},
				{
					"comment": "Keyword Extended Sizeof",
					"name": "keyword.sizeof.v",
					"match": "\\bsizeof\\b"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.modifier.v",
					"match": "\\b(const|mut|pub)\\b"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"name": "constant.numeric.integer.v",
					"match": "^[-]?([0-9]+|0x[0-9a-fA-F]+)$"
				},
				{
					"name": "constant.numeric.float.v",
					"match": "[-]?[0-9]+[.]?[0-9]+"
				}
			]
		},
		"singlestring": {
			"name": "string.quoted.single.v",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.v",
					"match": "\\\\."
				}
			]
		},
		"doublestring": {
			"name": "string.quoted.double.v",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.v",
					"match": "\\\\."
				}
			]
		}
	}
}