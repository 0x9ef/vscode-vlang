{
	"name": "V",
	"scopeName": "source.v",
	"patterns": [
		{
			"name": "meta.module.v",
			"begin": "^\\s*(module)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.module.v"
				}
			},
			"end": "([0-9a-zA-Z_]*)",
			"endCaptures": {
				"1": {
					"name": "entity.name.module.v"
				}
			}
		},
		{
			"name": "meta.import.v",
			"begin": "^\\s*(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.v"
				}
			},
			"end": "([0-9a-zA-Z_.]*)",
			"endCaptures": {
				"1": {
					"name": "entity.name.import.v"
				}
			}
		},
		{
			"name": "meta.include.v",
			"begin": "^\\s*(#include)",
			"beginCaptures": {
				"1": {
					"name": "keyword.include.v"
				}
			},
			"end": "\\s+(([\\<\"])\\s*(.*)([\\>\"]))",
			"endCaptures": {
				"1": {
					"name": "string.quoted.double.v"
				}
			}
		},
		{
			"name": "meta.flag.v",
			"begin": "^\\s*(#flag)",
			"beginCaptures": {
				"1": {
					"name": "keyword.flag.v"
				}
			},
			"end": "\\s+(.*?)$",
			"endCaptures": {
				"1": {
					"name": "string.quoted.single.v"
				}
			}
		},
		{
			"include": "#comments"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#as"
		},
		{
			"include": "#assignment"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#builtin-fix"
		},
		{
			"include": "#escaped-fix"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#function-new-limited-overload"
		},
		{
			"include": "#function-new-extend"
		},
		{
			"include": "#function-new"
		},
		{
			"include": "#function-exist"
		},
		{
			"include": "#generic"
		},
		{
			"include": "#type"
		},
		{
			"include": "#enum"
		},
		{
			"include": "#struct"
		},
		{
			"include": "#interface"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#std-types"
		}
	],
	"repository": {
		"as": {
			"begin": "\\s+(as)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.as.v"
				}
			},
			"end": "([0-9a-zA-Z_.]*)",
			"endCaptures": {
				"1": {
					"name": "entity.name.alias.v"
				}
			}
		},
		"assignment": {
			"patterns": [
				{
					"name": "meta.definition.variable.v",
					"match": "([0-9a-zA-Z_.]+)\\s*((?:\\:|\\+|\\-|\\*|\\/|\\%|\\&|\\||\\^)?=)\\s*(?=.+)",
					"captures": {
						"1": {
							"name": "variable.assignment.other.v"
						},
						"2": {
							"patterns":[
								{
									"include": "#operators"
								}
							]
						}
					}
				}
			]
		},
		"attributes": {
			"patterns": [
				{
					"name": "meta.definition.attribute.v",
					"match": "^\\s*((\\[)(unsafe_fn|deprecated|live|inline)(\\]))",
					"captures": {
						"1": {
							"name": "meta.function.attribute.v"
						},
						"2": {
							"name": "punctuation.definition.begin.bracket.square.v"
						},
						"3": {
							"name": "storage.modifier.attribute.v"
						},
						"4": {
							"name": "punctuation.definition.end.bracket.square.v"
						}
					}
				},
				{
					"name": "meta.definition.support.attribute.v",
					"match": "(?<=[0-9a-zA-Z_\\s])(?:(\\[)(skip)(\\]))",
					"captures": {
						"1": { 
							"name": "punctuation.definition.begin.bracket.square.v"
						},
						"2": {
							"name": "storage.modifier.support.attribute.v"
						},
						"3": {
							"name": "punctuation.definition.end.bracket.square.v"
						}
					}
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.begin.v"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.curly.end.v"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.round.begin.v"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.bracket.round.end.v"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "\\[|\\]",
					"name": "punctuation.definition.bracket.square.v"
				}
			]
		},
		"builtin-fix": {
			"patterns": [
				{
					"patterns": [
						{
							"match": "^\\s*(const)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.modifier.v"
								}
							}
						},
						{
							"match": "(fn)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "keyword.fn.v"
								}
							}	
						},
						{
							"match": "(assert)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "keyword.assert.v"
								}
							}
						},
						{
							"match": "(sizeof)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "keyword.sizeof.v"
								}
							}
						}
					]
				},
				{
					"patterns": [
						{
							"match": "(i?(?:8|16|nt|64|128)|u?(?:16|32|64|128)|f?(?:32|64))(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.numeric.v"
								}
							},
							"name": "meta.expr.numeric.cast.v"
						},
						{
							"match": "(bool)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.boolean.v"
								}
							},
							"name": "meta.expr.bool.cast.v"
						},
						{
							"match": "(byte)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.byte.v"
								}
							},
							"name": "meta.expr.byte.cast.v"
						},
						{
							"match": "(byteptr)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.byteptr.v"
								}
							},
							"name": "meta.expr.byteptr.cast.v"
						},
						{
							"match": "(voidptr)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.voidptr.v"
								}
							},
							"name": "meta.expr.voidptr.cast.v"
						},
						{
							"match": "(string)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.string.v"
								}
							},
							"name": "meta.expr.string.cast.v"
						},
						{
							"match": "(ustring)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.ustring.v"
								}
							},
							"name": "meta.expr.ustring.cast.v"
						},
						{
							"match": "(rune)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.rune.v"
								}
							},
							"name": "meta.expr.rune.cast.v"
						},
						{
							"match": "(none)(?=\\s*\\()",
							"captures": {
								"1": {
									"name": "storage.type.none.v"
								}
							},
							"name": "meta.expr.none.cast.v"
						}
					]
				}
			]
		},
		"escaped-fix": {
			"patterns": [
				{
					"name": "meta.escaped.keyword.v",
					"match": "((?:@)(?:mut|pub|fn|module|import|as|const|map|assert|sizeof|type|struct|interface|enum|in|or|match|if|else|for|go|goto|defer|return|i?(?:8|16|nt|64|128)|u?(?:16|32|64|128)|f?(?:32|64)|bool|byte|byteptr|charptr|voidptr|string|ustring|rune|none))",
					"captures": {
						"0": {
							"name": "keyword.other.escaped.v"
						}
					}
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.documentation.v",
					"begin": "/\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.v"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.v"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						}
					]
				},
				{
					"name": "comment.line.double-slash.v",
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.v"
						}
					},
					"end": "$"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.v",
					"match": "(true|false)"
				}
			]
		},
		"generic": {
			"patterns": [
				{
					"name": "meta.definition.generic.v",
					"match": "(\\<)([0-9a-zA-Z_]+)(\\>)",
					"captures": {
						"1": {
							"name": "punctuation.definition.bracket.angle.begin.v"
						},
						"2": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.v"
								},
								{
									"match": "\\w+",
									"name": "entity.name.generic.v"
								}
							]
						},
						"3": {
							"name": "punctuation.definition.bracket.angle.end.v"
						}
					}
				}
			]
		},
		"function-new": {
			"patterns": [
				{
					"name": "meta.definition.function.v",
					"begin": "^\\s*(pub)?\\s*(fn)\\s+",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.v"
						},
						"2": {
							"name": "keyword.function.v"
						}
					},
					"end": "(?:(?:C\\.)?)([0-9a-zA-Z_]+)(\\<[0-9a-zA-Z_]*\\>)?",
					"endCaptures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.v"
								},
								{
									"match": "\\w+",
									"name": "entity.name.function.v"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#generic"
								}
							]
						}
					}
				}
			]
		},
		"function-new-extend": {
			"patterns": [
				{
					"name": "meta.definition.function.v",
					"match": "^\\s*(pub)?\\s*(fn)\\s*(\\()([^\\)]*)(\\))\\s*(?:(?:C\\.)?)([0-9a-zA-Z_]+)(\\<[0-9a-zA-Z_]*\\>)?",
					"captures": {
						"1": {
							"name": "storage.modifier.v"
						},
						"2": {
							"name": "keyword.function.v"
						},
						"3": {
							"name": "punctuation.definition.bracket.round.begin.v"
						},
						"4": {
							"patterns": [
								{
									"include": "#brackets"
								},
								{
									"include": "#storage"
								},
								{
									"include": "#generics"
								},
								{
									"include": "#std-types"
								},
								{
									"include": "#punctuation"
								}
							]
						},
						"5": {
							"name": "punctuation.definition.bracket.round.end.v"
						},
						"6": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.v"
								},
								{
									"match": "\\w+",
									"name": "entity.name.function.v"
								}
							]
						},
						"7": {
							"patterns": [
								{
									"include": "#generic"
								}
							]
						}
					}
				}
			]
		},
		"function-new-limited-overload": {
			"patterns": [
				{
					"name": "meta.definition.function.v",
					"match": "^\\s*(pub)?\\s*(fn)\\s*(\\()([^\\)]*)(\\))\\s*([\\+\\-\\*\\/])?\\s*(\\()([^\\)]*)(\\))\\s*(?:(?:C\\.)?)([0-9a-zA-Z_]+)",
					"captures": {
						"1": {
							"name": "storage.modifier.v"
						},
						"2": {
							"name": "keyword.function.v"
						},
						"3": {
							"name": "punctuation.definition.bracket.round.begin.v"
						},
						"4": {
							"patterns": [
								{
									"include": "#brackets"
								},
								{
									"include": "#storage"
								},
								{
									"include": "#generics"
								},
								{
									"include": "#std-types"
								},
								{
									"include": "#punctuation"
								}
							]
						},
						"5": {
							"name": "punctuation.definition.bracket.round.end.v"
						},
						"6": {
							"patterns": [
								{
									"include": "#operators"
								}
							]
						},
						"7": {
							"name": "punctuation.definition.bracket.round.begin.v"
						},
						"8": {
							"patterns": [
								{
									"include": "#brackets"
								},
								{
									"include": "#storage"
								},
								{
									"include": "#generics"
								},
								{
									"include": "#std-types"
								},
								{
									"include": "#punctuation"
								}
							]
						},
						"9": {
							"name": "punctuation.definition.bracket.round.end.v"
						},
						"10": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.v"
								},
								{
									"match": "\\w+",
									"name": "entity.name.function.v"
								}
							]
						}
					}
				}
			]
		},
		"function-exist": {
			"patterns": [
				{
					"name": "meta.support.function.v",
					"match": "([0-9a-zA-Z_]+)(\\<[0-9a-zA-Z_]*\\>)?(?=\\s*\\()",
					"captures": {
						"0": {
							"name": "meta.function.call.v"
						},
						"1": {
							"patterns": [
								{
									"match": "\\d\\w+",
									"name": "invalid.illegal.v"
								},
								{
									"match": "\\w+",
									"name": "support.function.v"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#generic"
								}
							]
						}
					}
				}
			]
		},
		"type": {
			"patterns": [
				{
					"name": "meta.definition.type.v",
					"match": "\\s*(?:(pub)?\\s+)?(type)\\s+([0-9a-zA-Z_]*)\\s+(?:[0-9a-zA-Z]+\\.+)?([0-9a-zA-Z_]*)",
					"captures": {
						"1": {
							"name": "storage.modifier.$1.v"
						},
						"2": {
							"name": "storage.type.type.v"
						},
						"3": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.type.v",
									"match": "\\w+"
								}
							]
						},
						"4": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.type.v",
									"match": "\\w+"
								}
							]
						}
					}
				}
			]
		},
		"enum": {
			"patterns": [
				{
					"name": "meta.definition.enum.v",
					"match": "\\s*(?:(pub)?\\s+)?(enum)\\s+(?:[0-9a-zA-Z_]+\\.)?([0-9a-zA-Z_]*)",
					"captures": {
						"1": {
							"name": "storage.modifier.$1.v"
						},
						"2": {
							"name": "storage.type.enum.v"
						},
						"3": {
							"name": "entity.name.enum.v"
						}
					}
				}
			]
		},
		"struct": {
			"patterns": [
				{
					"name": "meta.definition.struct.v",
					"begin": "\\s*(?:(mut|pub(?:\\s+mut)?|__global)\\s+)?(struct)\\s+([0-9a-zA-Z_.]+)\\s*({)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.$1.v"
						},
						"2": {
							"name": "storage.type.struct.v"
						},
						"3": {
							"name": "entity.name.struct.v"
						},
						"4": {
							"name": "punctuation.definition.bracket.curly.begin.v"
						}
					},
					"end": "\\s*(})",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.bracket.curly.end.v"
						} 
					}, 
					"patterns": [
						{
							"include": "#struct-access-modifier"
						},
						{
							"match": "\\b(\\w+)\\s+([\\w\\[\\].]+)(?:\\s*(=)\\s*((?:.(?=$|//|/\\*))*+))?",
							"captures": {
								"1": {
									"name": "variable.other.property.v"
								},
								"2": {
									"patterns": [
										{
											"include": "#numbers"
										},
										{
											"include": "#brackets"
										},
										{
											"include": "#std-types"
										},
										{
											"match": "\\w+",
											"name": "storage.type.other.v"
										}
									]
								},
								"3": {
									"name": "keyword.operator.assignment.v"
								},
								"4": {
									"patterns": [
										{
											"include": "$self"
										}
									]
								}
							}
						},
						{
							"include": "#std-types"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.definition.struct.v",
					"match": "(?:(mut|pub(?:\\s+mut)?|__global)\\s+)?(struct)(?:\\s+([0-9a-zA-Z_.]+))?",
					"captures": {
						"1": {
							"name": "storage.modifier.$1.v"
						},
						"2": {
							"name": "storage.type.struct.v"
						},
						"3": {
							"name": "entity.name.struct.v"
						}
					}
				}
			]
		},
		"struct-access-modifier": {
			"match": "(?<=\\s|^)(mut|pub(?:\\s+mut)?|__global)(:|\\b)",
			"captures": {
				"1": {
					"name": "storage.modifier.$1.v"
				},
				"2": {
					"name": "punctuation.separator.struct.key-value.v"
				}
			}
		},
		"interface": {
			"patterns": [
				{
					"name": "meta.definition.interface.v",
					"match": "\\s*(?:(pub)?\\s+)?(interface)\\s+([0-9a-zA-Z_]*)",
					"captures": {
						"1": {
							"name": "keyword.pub.v"
						},
						"2": {
							"name": "keyword.interface.v"
						},
						"3": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\d\\w+"
								},
								{
									"name": "entity.name.interface.v",
									"match": "\\w+"
								}
							]
						}
					}
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"match": "\\.",
					"name": "punctuation.definition.other.dot.v"
				},
				{
					"match": "\\,",
					"name": "punctuation.definition.other.comma.v"
				},
				{
					"match": "\\:",
					"name": "punctuation.definition.other.colon.v"
				},
				{
					"match": "\\;",
					"name": "punctuation.definition.other.semicolon.v"
				},
				{
					"match": "\\?",
					"name": "punctuation.definition.other.questionmark.v"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.v",
					"match": "\\b(in|or|break|continue|default|match|if|else|for|go|goto|defer|return)\\b"
				},
				{
					"name": "keyword.control.v",
					"match": "(\\$if)"
				},
				{
					"name": "keyword.control.v",
					"match": "(\\$else)"
				},
				{
					"name": "keyword.type.v",
					"match": "\\btype\\b"
				},
				{
					"name": "keyword.enum.v",
					"match": "\\benum\\b"
				},
				{
					"name": "keyword.struct.v",
					"match": "\\bstruct\\b"
				},
				{
					"name": "keyword.interface.v",
					"match": "\\binterface\\b"
				},
				{
					"name": "keyword.map.v",
					"match": "\\bmap\\b"
				},
				{
					"name": "keyword.assert.v",
					"match": "\\bassert\\b"
				},
				{
					"name": "keyword.sizeof.v",
					"match": "\\bsizeof\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmethic.v",
					"match": "(\\+|\\-|\\*|\\/|\\%|\\+\\+|\\-\\-)"
				},
				{
					"name": "keyword.operator.relation.v",
					"match": "(\\=\\=|\\!\\=|\\>|\\<|\\>\\=|\\<\\=)"
				},
				{
					"name": "keyword.operator.logical.v",
					"match": "(\\&\\&|\\|\\||\\!)"
				},
				{
					"name": "keyword.operator.bitwise.v",
					"match": "(\\&|\\||\\^|<(?!<)|>(?!>))"
				},
				{
					"name": "keyword.operator.assignment.v",
					"match": "(\\:\\=|\\=|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=|\\&\\=|\\|\\=|\\^\\=|\\&\\&\\=|\\|\\|\\=|\\>\\>\\=|\\<\\<\\=)"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.float.v",
					"match": "(?:(?:[-]?)(?:[0-9e]*)(?:[.]){1}(?:[0-9]+))"
				},
				{
					"name": "constant.numeric.hex.v",
					"match": "(?:0[xX])(?:[0-9a-fA-F]+)"
				},
				{
					"name": "constant.numeric.integer.v",
					"match": "\\b(?:[-]?)(?:[0-9]+)"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.modifier.v",
					"match": "\\b(const|mut|pub)\\b"
				}
			]
		},
		"std-types": {
			"patterns": [
				{
					"name": "storage.type.boolean.v",
					"match": "\\bbool\\b"
				},
				{
					"name": "storage.type.byte.v",
					"match": "\\bbyte\\b"
				},
				{
					"name": "storage.type.byteptr.v",
					"match": "\\bbyteptr\\b"
				},
				{
					"name": "storage.type.charptr.v",
					"match": "\\bcharptr\\b"
				},
				{
					"name": "storage.type.voidptr.v",
					"match": "\\bvoidptr\\b"
				},
				{
					"name": "storage.type.string.v",
					"match": "\\bstring\\b"
				},
				{
					"name": "storage.type.ustring.v",
					"match": "\\bustring\\b"
				},
				{
					"name": "storage.type.rune.v",
					"match": "\\brune\\b"
				},
				{
					"name": "storage.type.option.v",
					"match": "\\boption\\b"
				},
				{
					"name": "storage.type.numeric.v",
					"match": "\\b(i(8|16|nt|64|128)|u(16|32|64|u128)|f(32|64))\\b"
				},
				{
					"name": "storage.type.none.v",
					"match": "\\bnone\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\\`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.raw.begin.v"
						}
					},
					"end": "\\`",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.raw.end.v"
						}
					},
					"name": "string.quoted.raw.v",
					"patterns": [
						{
							"include": "#string-escaped-char"
						},
						{
							"include": "#string-interpolation"
						},
						{
							"include": "#string-placeholder"
						}
					]
				},
				{
					"begin": "\\'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.single.begin.v"
						}
					},
					"end": "\\'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.single.end.v"
						}
					},
					"name": "string.quoted.single.v",
					"patterns": [
						{
							"include": "#string-escaped-char"
						},
						{
							"include": "#string-interpolation"
						},
						{
							"include": "#string-placeholder"
						}
					]
				},
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.double.begin.v"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.double.end.v"
						}
					},
					"name": "string.quoted.double.v",
					"patterns": [
						{
							"include": "#string-escaped-char"
						},
						{
							"include": "#string-interpolation"
						},
						{
							"include": "#string-placeholder"
						}
					]
				}
			]
		},
		"string-escaped-char": {
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[\\$abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
					"name": "constant.character.escape.v"
				},
				{
					"match": "\\\\[^0-7\\$xuUabfnrtv\\'\"]",
					"name": "invalid.illegal.unknown-escape.v"
				}
			]
		},
		"string-interpolation": {
			"patterns": [
				{
					"name": "meta.string.interpolation.v",
					"match": "(\\$([0-9a-zA-Z_.]+|\\{.*?\\}))",
					"captures": {
						"1": {
							"patterns": [
								{
									"name": "invalid.illegal.v",
									"match": "\\$\\d[\\.\\w]+"
								},
								{
									"name": "variable.other.interpolated.v",
									"match": "\\$([\\.\\w]+|\\{.*?\\})"
								}
							]
						}
					}
				}
			] 
		},
		"string-placeholder": {
			"patterns": [
				{
					"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
					"name": "constant.other.placeholder.v"
				}
			]
		} 
	}
}
